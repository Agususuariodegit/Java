package aed;

import java.util.*;

// elem1.compareTo(elem2) devuelve un entero. Si es mayor a 0, entonces elem1 > elem2

public class ABB<T extends Comparable<T>> implements Conjunto<T> {

    // Atributos privados del Conjunto

    private Nodo raiz;
    private int cardinal;

    private class Nodo {

        // Atributos privados del Nodo
        // Constructor del nodo
        
        T valor;
        Nodo izq;
        Nodo der;
        Nodo padre;

        Nodo (T v) {
            valor = v;
            izq = null;
            der = null;
            padre = null;
        }
    }

    public ABB() {
        raiz = null;
        cardinal = 0;
    }

    public int cardinal() {
        return cardinal;
    }

    public T minimo(){
        Nodo actual = raiz;
        while (actual.izq != null){
            actual = actual.izq;
        }
        return actual.valor;
    }

    public T maximo(){
        Nodo actual = raiz;
        while (actual.der != null){
            actual = actual.der;
        }
        return actual.valor;
    }

    public void insertar(T elem){
        boolean agregado = false;
        boolean terminar = false;
        if (pertenece(elem) == false){
            cardinal ++;
            if (raiz == null){
                raiz = new Nodo(elem);
                raiz.padre = null;
            }
            else{
                Nodo actual = raiz;
/*                 while(agregado == false && actual != null){
                    if(((elem).compareTo(actual.valor) > 0) && (actual.der == null) && agregado == false){
                        actual.der = new Nodo(elem);
                        actual.der.padre = actual;
                        agregado = true;
                    }
                    if(((actual.valor).compareTo(elem) > 0) && (actual.izq == null) && agregado == false){
                        actual.izq = new Nodo(elem);
                        actual.izq.padre = actual;
                        agregado = true;
                    }
                    boolean movio_derecha = false;
                    if ((elem).compareTo(actual.valor) > 0 && agregado == false){
                        actual = actual.der;
                        movio_derecha = true;
                    }
                    if ((actual.valor).compareTo(elem) > 0 && agregado == false && movio_derecha == false) {
                        actual = actual.izq;
                    }
                } */
                 while(actual != null && terminar == false && agregado == false){
                    boolean derecha = false;
                    //el elemento es mayor que actual y su hijo derecho es vacio
                    if(((elem).compareTo(actual.valor) > 0) && (actual.der == null) && agregado == false){
                        actual.der = new Nodo(elem);
                        actual.der.padre = actual;
                        agregado = true;
                        terminar = true;
                    }
                    //el elemento es menor que actual y su hijo izquierdo es vacio
                    if(((actual.valor).compareTo(elem) > 0) && (actual.izq == null) && agregado == false){
                        actual.izq = new Nodo(elem);
                        actual.izq.padre = actual;
                        agregado = true;
                        terminar = true;
                    }
                    if ((elem).compareTo(actual.valor) > 0 && agregado == false){
                        actual = actual.der;
                        derecha = true;
                    }
                    if ((actual.valor).compareTo(elem) > 0 && agregado == false && derecha == false){
                        actual = actual.izq;
                    }
                }
            }
        }
    }

//////////////////////////////////////////////////////////////////////////////////////////

    public boolean pertenece(T elem){
        if (raiz == null){
            return false;
        }
        else{
        Nodo actual = raiz;
        while(actual != null){
            if (actual.valor.equals(elem)){
                return true;
            }
            if ((elem).compareTo(actual.valor) > 0){
                actual = actual.der;
            }
            else{
                actual = actual.izq;
            }
        }
        return false;
        }
    }

//////////////////////////////////////////////////////////////////////////////////////////

    public void eliminar(T elem){
    //caso cuando solo tiene un elemento
    if (raiz.der == null && raiz.izq == null && raiz.valor == elem){
        raiz = null;
    }else{
    //caso general
        if (pertenece(elem)){
            
            Nodo actual = raiz;
    
            // recorro el arbol hasta llegar a que elem = actual.valor
            while (actual.valor.equals(elem) == false){
                if ((elem).compareTo(actual.valor) > 0){
                    actual = actual.der;
                }
                else{
                    actual = actual.izq;
                }
            }
            //caso tiene un solo hijo menor
            if (actual.izq != null && actual.der == null){
            //veo caso particular donde quiero borrar la raiz luego
                if (actual != raiz){
                    actual.izq.padre = actual.padre;
                    //caso el valor del hijo es mayor al de actual.padre
                    if((actual.izq.valor).compareTo(actual.padre.valor) > 0){
                        actual.padre.der = actual.izq;
                    //caso contrario
                    }else{
                        actual.padre.izq = actual.izq;
                    }
                }else{
                    raiz = actual.izq;
                    raiz.padre = null;
                }
            }
            //caso solo tiene un hijo mayor
            if (actual.izq == null && actual.der != null){
            //veo caso particular donde quiero borrar la raiz abajo
                if (actual != raiz){
                    actual.der.padre = actual.padre;
                    //caso el valor del hijo es mayor al de actual.padre
                    if((actual.der.valor).compareTo(actual.padre.valor) > 0){ 
                        actual.padre.der = actual.der;                         
                    //caso contrario
                    }else{
                        actual.padre.izq = actual.der;
                    }
                }else{
                    raiz = actual.der;
                    raiz.padre = null;
                }   
            }
            //caso tiene dos hijos
            if (actual.der != null && actual.izq != null){
                //creo su sucesor
                Nodo sucesor = sucesor(actual);
                //debo ver dos casos, si su sucesor es actual.der directamente o no
                //caso donde actual.der no es sucesor de actual
                T val = sucesor.valor;
                eliminar(val);
                actual.valor = val;
                /*if(sucesor != actual.der){
                    actual.valor = sucesor.valor;
                //caso donde actual.der es sucesor de actual
                //sabemos que actual.der no tiene hijo izquierdo o menor
                }else{
                    actual.valor = sucesor.valor;
                    actual.der = sucesor.der;
                }
                //corto la conexion con sucesor
                if (sucesor.padre.der != null && sucesor.padre.der.valor == sucesor.valor){
                    sucesor.padre.der = null;
                }
                if(sucesor.padre.der != null && sucesor.padre.izq.valor == sucesor.valor){
                    sucesor.padre.izq = null;
                }
                //defino nulo a sucesor
                sucesor = null;*/
            }
            //caso no tiene hijos
            if (actual.der == null && actual.izq == null){
                //veo si es hijo izquierdo
                if(actual.padre.izq == actual){
                    actual.padre.izq = null;
                }
                if(actual.padre.der == actual){
                    actual.padre.der = null;
                }
            }
        cardinal --;
        }
        }
    }

//////////////////////////////////////////////////////////////////////////////////////////

 private Nodo sucesor(Nodo nodo){
        //creo la variable res
        Nodo res = new Nodo(null);
        //caso en el que nodo tiene hijo derecho
        if(nodo.der != null){
            res = nodo.der;
            while(res.izq != null){
                res = res.izq;
            }
        }else{
        //caso no tiene hijo derecho
        res = nodo.padre;
        while((nodo.valor).compareTo(res.valor) > 0){
            res = res.padre;
        }
        }
        return res;
}

//////////////////////////////////////////////////////////////////////////////////////////

    public String toString(){

        String res = "{";
        if (raiz == null){
            return "{}";
        }
        if (cardinal == 1){
            return "{" + raiz.valor + "}";
        }
        else{
            //debo usar sucesor
            //busco el nodo tal que nodo.valor = minimo()
            Nodo actual = raiz;
            while(actual.valor != minimo()){
                if(actual.izq != null){
                    actual = actual.izq;
                }
            }
            res = res + actual.valor;
            Nodo sucesor = sucesor(actual);
            while(sucesor.valor != maximo()){
                res = res + "," + sucesor.valor;
                sucesor = sucesor(sucesor);
            }
            res = res + "," + maximo() + "}";
        return res;
        }
    }

    public Nodo NodoMinimo(){
        Nodo actual = raiz;
        while(actual.izq != null){
            actual = actual.izq;
        }
        return actual;
    }

//////////////////////////////////////////////////////////////////////////////////////////

private class ABB_Iterador implements Iterador<T> {

    private Nodo actual = NodoMinimo();

    public boolean haySiguiente() {
        return sucesor(actual) != null;
    }

    public T siguiente() {
        if(actual.valor != maximo()){
            T res = actual.valor;
            actual = sucesor(actual);
            return res;
        }else{
            actual.valor = maximo();
            return actual.valor;
        }
    }
}
    public Iterador<T> iterador() {
        return new ABB_Iterador();
    }
}
